<?php

/**
 * @file
 * Implements Paybox payment services for use with Drupal.
 */

define('PAYBOX_URL', 'https://tpeweb.paybox.com/cgi/MYchoix_pagepaiement.cgi');
define('PAYBOX_SANDBOX_URL', 'https://preprod-tpeweb.paybox.com/cgi/MYchoix_pagepaiement.cgi');

define('PAYBOX_DIRECT_URL', 'https://ppps.paybox.com/PPPS.php');
define('PAYBOX_DIRECT_SANDBOX_URL', 'https://preprod-ppps.paybox.com/PPPS.php');

define('PAYBOX_HASH', 'SHA512');

define('PAYBOX_PAYMENT_STATUS_FAILURE', 0);
define('PAYBOX_PAYMENT_STATUS_SUCCESS', 1);
define('PAYBOX_PAYMENT_STATUS_PENDING', 2);

/**
 * Implements hook_permission().
 */
function paybox_permission() {
  return array(
    'administer paybox settings' => array(
      'title' => t('Administer paybox settings'),
      'description' => t('Administer Paybox settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function paybox_menu() {
  $items['paybox/return-page'] = array(
    'page callback' => '_paybox_return_page',
    'access callback' => 'user_is_logged_in',
  );

  $items['paybox/ipn-callback'] = array(
    'page callback' => '_paybox_ipn_callback_page',
    'access callback' => '_is_allowed_paybox_ipn_callback',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/paybox'] = array(
    'title' => 'Paybox settings',
    'description' => t('Administer Paybox settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paybox_settings_form'),
    'access arguments' => array('administer paybox settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/paybox.admin.inc',
  );

  return $items;
}

/**
 * Send a payment request to paybox.
 *
 * @param $cents
 * @param $order_id
 * @param $email
 * @param array $options
 * @param string $currency
 * @param string $payment_method
 */
function paybox_pay($cents, $order_id, $email, $currency = 'euro', $payment_method = 'cb', $options = array()) {
  $params = array(
    'total' => $cents,
    'order_id' => $order_id,
    'email' => $email,
    'currency' => $currency,
    'payment_method' => $payment_method,
  );

  if (isset($options['return_url'])) {
    $params['return_url'] = $options['return_url'];
  }

  if (isset($options['cmd'])) {
    $params['cmd'] = $options['cmd'];
  }

  $post_fields = _paybox_build_params_array($params);
  $host = _paybox_get_host();

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_HEADER, TRUE);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_URL, $host);
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $post_fields);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/x-www-form-urlencoded'));

  $response = curl_exec($ch);
}

/**
 * Checks if the server ip belongs to Paybox.
 */
function _is_allowed_paybox_ipn_callback() {
  $allowed_ips = variable_get('paybox_authorized_ips', '127.0.0.1');
  $allowed_ips = explode(",", $allowed_ips);

  if (in_array($_SERVER['REMOTE_ADDR'], $allowed_ips)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Handles ipn callback from paybox.
 */
function _paybox_ipn_callback_page() {
  $order_id = $_GET['order_id'];
  if (_paybox_check_sign($_SERVER['QUERY_STRING'])) {
    // Check payment is accepted.
    if ($_GET['error'] === '00000') {
      $status = PAYBOX_PAYMENT_STATUS_SUCCESS;
    }
    else {
      $message = _paybox_get_paybox_error_msg($_GET['error']);
      // Log Paybox signature errors.
      $log = 'Error @error: !msg';
      $log_vars = array(
        '@error' => $_GET['error'],
        '!msg' => $message,
      );
      watchdog('paybox', $log, $log_vars, WATCHDOG_ERROR);

      // Invalidate the transaction.
      $message = t($log, $log_vars);
      $status = PAYBOX_PAYMENT_STATUS_FAILURE;
    }
  }
  else {
    // Log paybox signature errors.
    $log = 'Paybox System has failed to encrypt his own data for order @order_id.';
    $log_vars = array(
      '@order_id' => $_GET['order_id'],
    );
    watchdog('paybox', $log, $log_vars, WATCHDOG_ERROR);

    // Invalidate the transaction.
    $message = t('Paybox System has failed to encrypt his own data.');
    $status = PAYBOX_PAYMENT_STATUS_FAILURE;
  }

  $info = array();
  module_invoke_all('paybox_update_status', $order_id, $status, $info);

  // Output an empty HTML page.
  return NULL;
}

/**
 * Handles return from paybox.
 */
function _paybox_return_page() {
  $return_url = $_GET['return_url'];
  $result = $_GET['result'];

  switch ($result) {
    case 'validated' :
      drupal_set_message(variable_get('paybox_effectue_message', t('Payment completed. Thank you.')), 'status');
      break;
    case 'denied' :
      drupal_set_message(variable_get('paybox_refuse_message', t('Payment refused. Sorry.')), 'error');
      break;
    case 'canceled' :
      drupal_set_message(variable_get('paybox_annule_message', t('Payment canceled.')), 'warning');
      break;
  }

  drupal_goto($return_url);
}

/**
 * Return the devise code from a string.
 *
 * @param $devise
 * @return mixed
 */
function _paybox_devise_code($devise) {
  static $codes = array(
    'euro' => '978',
    'USD' => '840',
  );

  return $codes[$devise];
}

/**
 * Return the payment method from a string.
 *
 * @param $payment_method
 *   A key to get paybox official payment methods denominations.
 * @param string $type
 *   PBX_TYPECARTE or PBX_TYPEPAIMENT, defaults to PBX_TYPECARTE for retrocompatibility.
 * @return string
 */
function _paybox_payment_method($payment_method, $type = 'PBX_TYPECARTE') {
  if ($type == 'PBX_TYPECARTE') {
    switch ($payment_method) {
      case 'cb' :
        return 'CB';
      case 'visa' :
        return 'VISA';
      case 'mastercard' :
        return 'EUROCARD_MASTERCARD';
      case 'paypal' :
        return 'PAYPAL';
    }
  }
  else {
    switch ($payment_method) {
      case 'cb' :
        return 'CARTE';
      case 'visa' :
        return 'CARTE';
      case 'mastercard' :
        return 'CARTE';
      case 'paypal' :
        return 'PAYPAL';
    }
  }
}

/**
 * Payment form.
 */
function paybox_redirect_form($form, $form_state, $params) {
  $form = array();

  $post_params = _paybox_build_params_array($params);

  foreach ($post_params as $name => $param) {
    $form[$name] = array('#type' => 'hidden', '#value' => $param);
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pay with Paybox'),
  );

  $host = _paybox_get_host();
  $form['#action'] = $host;

  return $form;
}

/**
 * Return Paybox host in depending of environment settings.
 *
 * @return string
 */
function _paybox_get_host() {
  if (variable_get('paybox_activate_real_payments', FALSE)) {
    $host = variable_get('paybox_production_host', PAYBOX_URL);
  }
  else {
    $host = variable_get('paybox_sandbox_host', PAYBOX_SANDBOX_URL);
  }

  return $host;
}

/**
 * Return secret key in depending of environment settings.
 *
 * @return null
 */
function _paybox_get_secret_key() {
  if (variable_get('paybox_activate_real_payments', FALSE)) {
    $key = variable_get('paybox_production_hash_key', '');
  }
  else {
    $key = variable_get('paybox_sandbox_hash_key', '');
  }

  return $key;
}

/**
 * Build array of Paybox params.
 *
 * @param $params
 * @return array
 */
function _paybox_build_params_array($params) {
  global $language;

  $secretKey = _paybox_get_secret_key();

  $PBX_SITE = variable_get('paybox_PBX_SITE');
  $PBX_RANG = variable_get('paybox_PBX_RANG');
  $PBX_IDENTIFIANT = variable_get('paybox_PBX_IDENTIFIANT');
  $PBX_TOTAL = $params['total'];
  $PBX_DEVISE = _paybox_devise_code($params['currency']);
  $PBX_CMD = $params['cmd'];
  $PBX_PORTEUR = $params['email'];
  $PBX_RETOUR = "Mt:M;Ref:R;Auto:A;Erreur:E";
  $PBX_HASH = PAYBOX_HASH;
  $PBX_TIME = date('c');
  $PBX_TYPEPAIEMENT = _paybox_payment_method($params['payment_method'], 'PBX_TYPEPAIEMENT');
  $PBX_TYPECARTE = _paybox_payment_method($params['payment_method'], 'PBX_TYPECARTE');

  if ($lang_auto = paybox_map_language($language->language)) {
    $PBX_LANGUE = $lang_auto;
  }
  else {
    $PBX_LANGUE = 'FRA';
  }

  $msg =
    "PBX_SITE=$PBX_SITE" .
    "&PBX_RANG=$PBX_RANG" .
    "&PBX_IDENTIFIANT=$PBX_IDENTIFIANT" .
    "&PBX_TOTAL=$PBX_TOTAL" .
    "&PBX_DEVISE=$PBX_DEVISE" .
    "&PBX_CMD=$PBX_CMD" .
    "&PBX_PORTEUR=$PBX_PORTEUR" .
    "&PBX_RETOUR=$PBX_RETOUR" .
    "&PBX_HASH=$PBX_HASH" .
    "&PBX_TIME=$PBX_TIME" .
    "&PBX_TYPEPAIEMENT=$PBX_TYPEPAIEMENT" .
    "&PBX_TYPECARTE=$PBX_TYPECARTE" .
    "&PBX_LANGUE=$PBX_LANGUE";

  $post_params = array(
    'PBX_SITE' => $PBX_SITE,
    'PBX_RANG' => $PBX_RANG,
    'PBX_TOTAL' => str_pad($PBX_TOTAL, 3, '0', STR_PAD_LEFT),
    'PBX_DEVISE' => $PBX_DEVISE,
    'PBX_CMD' => $params['order_id'],
    'PBX_PORTEUR' => $params['email'],
    'PBX_TYPECARTE' => $PBX_TYPECARTE,
    'PBX_RETOUR' => $PBX_RETOUR,
    'PBX_IDENTIFIANT' => $PBX_IDENTIFIANT,
    'PBX_TYPEPAIEMENT' => $PBX_TYPEPAIEMENT,
    'PBX_HASH' => PAYBOX_HASH,
    'PBX_TIME' => $PBX_TIME,
    'PBX_LANGUE' => $PBX_LANGUE,
    'PBX_REPONDRE_A' => url('paybox/ipn-callback', array('absolute' => TRUE)),
  );

  if (isset($params['return_url'])) {
    $PBX_EFFECTUE = $params['return_url'];
    $PBX_REFUSE = $params['return_url'];
    $PBX_ANNULE = $params['return_url'];

    $msg .=
      "&PBX_EFFECTUE=$PBX_EFFECTUE" .
      "&PBX_ANNULE=$PBX_ANNULE" .
      "&PBX_REFUSE=$PBX_REFUSE";

    $post_params['PBX_EFFECTUE'] = $PBX_EFFECTUE;
    $post_params['PBX_REFUSE'] = $PBX_REFUSE;
    $post_params['PBX_ANNULE'] = $PBX_ANNULE;
  }

  $binKey = pack("H*", $secretKey);
  $PBX_HMAC = strtoupper(hash_hmac($PBX_HASH, $msg, $binKey));
  $params['PBX_HMAC'] = $PBX_HMAC;

  drupal_alter('paybox_post_params', $params);

  return $post_params;
}

/**
 * Try to map the Drupal's language code to the Paybox language code.
 *
 * @param string $langcode
 *   A language code (eg. 'en', 'fr', ...).
 *
 * @return string|false
 *   The Paybox language code if a mapping is found, FALSE otherwise.
 */
function paybox_map_language($langcode) {
  $lang_map = array(
    'fr' => 'FRA',
    'en' => 'GBR',
    'en-gb' => 'GBR',
    'es' => 'ESP',
    'it' => 'ITA',
    'de' => 'DEU',
    'nl' => 'NLD',
    'sv' => 'SWE',
    'pt' => 'PRT',
    'pt-pt' => 'PRT',
    'pt-br' => 'PRT',
  );

  return isset($lang_map[$langcode]) ? $lang_map[$langcode] : FALSE;
}

/**
 * Check if signature of the Paybox server's response URL is correct.
 *
 * @return bool
 *   TRUE if signing is correct, FALSE otherwise.
 */
function _paybox_check_sign($query_string) {
  $matches = array();
  if (preg_match('/(?:q=.*?&)?(.*)&sig=(.*)$/', $query_string, $matches)) {
    $data = $matches[1];
    $sig = base64_decode(urldecode($matches[2]));

    $key_file = drupal_get_path('module', 'paybox') . '/pubkey.pem';
    if ($key_file_content = file_get_contents($key_file)) {
      if ($key = openssl_pkey_get_public($key_file_content)) {
        return openssl_verify($data, $sig, $key);
      }
    }

    $log = t('Cannot read Paybox System public key file (@file).');
    $log_vars = array('@file' => $key_file);
    watchdog('commerce_paybox', $log, $log_vars, WATCHDOG_ERROR);
  }

  return FALSE;
}

/**
 * Retrieve the error message according to the error code from Paybox server.
 *
 * @param string $error
 *   The error code returned by the Paybox System server.
 *
 * @return string
 *   The translated error message.
 */
function _paybox_get_paybox_error_msg($error) {
  if (drupal_substr($error, 0, 3) == '001') {
    $precise_error = drupal_substr($error, 2);

    $precise_map = _paybox_get_precise_errors_map();

    if (isset($precise_map[$precise_error])) {
      return t('Payment refused by authorisation center (error @error).', array('@error' => $precise_map[$precise_error]));
    }

    $errors_map = _paybox_get_errors_map();
  }

  if (isset($errors_map[$error])) {
    return $errors_map[$error];
  }
  else {
    return t('Unknown error.');
  }
}

/**
 * Return mpa array of Paybox precise errors.
 *
 * @return array
 */
function _paybox_get_precise_errors_map() {
  return array(
    '00' => t('Transaction approved or successfully handled.'),
    '02' => t('Contact the card issuer.'),
    '03' => t('Invalid shop.'),
    '04' => t('Keep the card.'),
    '07' => t('Keep the card, special conditions.'),
    '08' => t('Approve after holder identification.'),
    '12' => t('Invalid transaction.'),
    '13' => t('Invalid amount.'),
    '14' => t('Invalid holder number.'),
    '15' => t('Unknown card issuer.'),
    '17' => t('Client has cancelled.'),
    '19' => t('Try transaction again later.'),
    '20' => t('Bad answer (error on server domain).'),
    '24' => t('Unsupported file update.'),
    '25' => t('Unable to locate record in file.'),
    '26' => t('Duplicate record, old record has been replaced.'),
    '27' => t('Edit error during file update.'),
    '28' => t('Unauthorized file access.'),
    '29' => t('Impossible file update.'),
    '30' => t('Format error.'),
    '33' => t('Validity date of the card reached.'),
    '34' => t('Fraud suspicion.'),
    '38' => t('Number of tries for confidential code reached.'),
    '41' => t('Lost card.'),
    '43' => t('Stolen card.'),
    '51' => t('Insufficient funds or no credit left.'),
    '54' => t('Validity date of the card reached.'),
    '55' => t('Bad confidential code.'),
    '56' => t('Card not in the file.'),
    '57' => t('Transaction not authorized for this cardholder.'),
    '58' => t('Transaction not authorized for this terminal.'),
    '59' => t('Fraud suspicion.'),
    '61' => t('Debit limit reached.'),
    '63' => t('Security rules not followed.'),
    '68' => t('Absent or late answer.'),
    '75' => t('Number of tries for confidential code reached.'),
    '76' => t('Cardholder already opposed, old record kept.'),
    '90' => t('System temporary stopped.'),
    '91' => t('Card provider is unreachable.'),
    '94' => t('Duplicate question.'),
    '96' => t('Bad system behavior.'),
    '97' => t('Global surveillance timeout.'),
    '98' => t('Server is unreachable.'),
    '99' => t('Incident from initiator domain.'),
  );
}

/**
 * Return map array for Paybox error codes.
 *
 * @return array
 */
function _paybox_get_errors_map() {
  return array(
    '00000' => t('Operation successful.'),
    '00001' => t('Connexion to autorise center failed.'),
    '00002' => t('Connexion to autorise center failed.'),
    '00003' => t('Paybox error.'),
    '00004' => t('Owner number or cryptogram invalid.'),
    '00005' => t('Invalid question number .'),
    '00006' => t('Access refused or rank/site/is incorrect.'),
    '00007' => t('Invalid date.'),
    '00008' => t('Error on expiry date'),
    '00009' => t('Error creating subscription.'),
    '00010' => t('Unknown currency.'),
    '00011' => t('Wrong order total.'),
    '00012' => t('Invalid order reference.'),
    '00013' => t('This version is no longer upheld.'),
    '00014' => t('Incoherent frame received.'),
    '00015' => t('Error in access to previously referenced data.'),
    '00016' => t('User already exists.'),
    '00017' => t('User does not exist.'),
    '00018' => t('Transaction not found.'),
    '00020' => t('CVV not present.'),
    '00021' => t('Unauthorized card.'),
    '00024' => t('Error loading of the key.'),
    '00025' => t('Missing signature.'),
    '00026' => t('Missing key but the signature is present.'),
    '00027' => t('Error OpenSSL during the checking of the signature.'),
    '00028' => t('Unchecked signature.'),
    '00029' => t('Card non-compliant.'),
    '00030' => t('Timeout on checkout page (> 15 mn).'),
    '00031' => t('Reserved.'),
    '00097' => t('Timeout of connection ended.'),
    '00098' => t('Internal connection error.'),
    '00099' => t('Incoherence between the question and the answer. Try again later.'),
  );
}
